00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 1/21/2021 6:44:26 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ********************************************************************************
00000000                             9  *
00000000                            10  *  Beginning of EQUates section, just like #define in C
00000000                            11  *
00000000                            12  ********************************************************************************
00000000  =00004000                 13  addr1     EQU     $4000        
00000000  =00004001                 14  addr2     EQU     $4001 
00000000  =0000A7FF                 15  data2     EQU     $A7FF 
00000000  =00005555                 16  data3     EQU     $5555 
00000000  =00000000                 17  data4     EQU     $0000 
00000000  =00001246                 18  data5     EQU     4678 
00000000  =0000004F                 19  data6     EQU     %01001111 
00000000  =00000017                 20  data7     EQU     %00010111 
00000000                            21  
00000000                            22  ********************************************************************************
00000000                            23  *
00000000                            24  * Beginning of code segment. This is the actual assembly language instructions.
00000000                            25  *
00000000                            26  ********************************************************************************
00000000                            27  
00000000                            28   
00000000                            29  
00000400                            30           ORG       $400               * This pseudo op code tells the assembler  here    
00000400                            31                                   * the program will run in memory
00000400                            32  start  
00000400  303C A7FF                 33           MOVE.W    #data2,D0     * Load D0 
00000404  123C 004F                 34           MOVE.B    #data6,D1     * Load D1 
00000408  143C 0017                 35           MOVE.B    #data7,D2     * load D2 
0000040C  363C 5555                 36           MOVE.W    #data3,D3     * load D3 
00000410  307C 4000                 37           MOVEA.W   #addr1,A0     * load address register 
00000414  10C1                      38           MOVE.B    D1,(A0)+      * transfer byte to memory 
00000416  10C2                      39           MOVE.B    D2,(A0)+      * transfer second byte
00000418  327C 4000                 40           MOVEA.W   #addr1,A1     * load address 
0000041C  C751                      41           AND.W     D3,(A1)       * Logical AND
0000041E                            42           
0000041E                            43  * The next instruction shows how a label is used
0000041E  4EF8 0400                 44          JMP        start        * This instruction keeps the program
00000422                            45                                  * looping forever
00000422                            46          END        $400         * This pseudo op-code tells the assemble

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               4000
ADDR2               4001
DATA2               A7FF
DATA3               5555
DATA4               0
DATA5               1246
DATA6               4F
DATA7               17
START               400
