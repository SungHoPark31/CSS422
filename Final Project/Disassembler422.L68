00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2/20/2021 2:11:27 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Sung Ho Park
00000000                             4  * Date       : 2/18/20
00000000                             5  * Description: Input
00000000                             6  *-----------------------------------------------------------
00000000  =0000A000                  7  stack   EQU     $A000
00000000  =0000000D                  8  CR      EQU     $0D     ;carriage return
00000000  =0000000A                  9  LF      EQU     $0A     ;line feed
00000000                            10      
00001000                            11  START   ORG     $1000    ;first instruction of program
00001000                            12  
00001000                            13  *-----------Starting Prompt--------------
00001000                            14  Initial     
00001000  43F9 000030A8             15          LEA     Prompt, A1  ;Ask for user for the starting address
00001006  103C 000E                 16          MOVE.B  #14, D0     ;Displays the Message
0000100A  4E4F                      17          TRAP    #15
0000100C                            18  
0000100C                            19  *----------Address input---------------
0000100C                            20  UserInput
0000100C  43F9 000031A2             21          LEA     Address1, A1    ;Ask the user for a starting address
00001012  103C 000E                 22          MOVE.B  #14, D0
00001016  4E4F                      23          TRAP    #15
00001018                            24          
00001018  43F9 00001168             25          LEA     StartString, A1    ;Store the user value
0000101E                            26          
0000101E  103C 0002                 27          MOVE.B  #2, D0       ;Read the string value from keyboard
00001022  4E4F                      28          TRAP    #15        
00001024                            29          
00001024  0C81 00000000             30          CMPI.L  #0, D1       ;If the user types in nothing, branch to Restart
0000102A  6700 0118                 31          BEQ     Restart
0000102E                            32          
0000102E  0C81 00000008             33          CMPI.L  #8, D1       ;If the user types more than 8 digits
00001034  6E00 010E                 34          BGT     Restart  
00001038                            35          
00001038  1801                      36          MOVE.B  D1, D4      ;D4 is where we will manipulate data. To avoid override
0000103A                            37                              ;store the contents of D1 to D4. This is also the 
0000103A                            38                              ;starting location
0000103A                            39                              
0000103A  43F9 000031C6             40          LEA     Address2, A1    ;Ask the user for a starting address
00001040  103C 000E                 41          MOVE.B  #14, D0
00001044  4E4F                      42          TRAP    #15
00001046                            43          
00001046  43F9 00001168             44          LEA     EndString, A1    ;Store the user value
0000104C                            45          
0000104C  103C 0002                 46          MOVE.B  #2, D0       ;Read the string value from keyboard
00001050  4E4F                      47          TRAP    #15        
00001052                            48          
00001052  0C81 00000000             49          CMPI.L  #0, D1       ;If the user types in nothing, branch to Restart
00001058  6700 00EA                 50          BEQ     Restart
0000105C                            51          
0000105C  0C81 00000008             52          CMPI.L  #8, D1       ;If the user types more than 8 digits
00001062  6E00 00E0                 53          BGT     Restart  
00001066                            54  
00001066  1A04                      55          MOVE.B  D4, D5      ;Use D5 as a for loop counter
00001068  47F9 00001168             56          LEA     StartString, A3 ;Use A3 pointer to keep track of the ASCII so we convert it to Hex later  
0000106E  49F9 00001168             57          LEA     StartAddr, A4   ;Use A4 pointer to keep track of where to store the conversion results 
00001074  42B9 00001168             58          CLR.L   StartAddr
0000107A  4EB9 0000109A             59          JSR     Convert
00001080                            60  
00001080                            61            
00001080  1A01                      62          MOVE.B  D1, D5      ;D5 is where we will manipulate data. To avoid override
00001082                            63                              ;store the contents of D1 to D5.
00001082                            64                              ;end location
00001082  47F9 00001168             65          LEA     EndString, A3
00001088  49F9 00002108             66          LEA     EndAddr, A4
0000108E  42B9 00002108             67          CLR.L   EndAddr
00001094  4EB9 0000109A             68          JSR     Convert    
0000109A                            69  
0000109A                            70  *-----------Converting the string to hex-------------
0000109A                            71  Convert
0000109A  181B                      72          MOVE.B  (A3)+, D4   ;In this context, use D4 to keep track of the current ASCII code
0000109C  2C14                      73          MOVE.L  (A4),D6     
0000109E  E98E                      74          LSL.L   #4, D6      ;Shift the address by 4 bits to the left
000010A0  2886                      75          MOVE.L  D6, (A4)    ;Make space for the digit we are about to add
000010A2  0C84 00000040             76          CMPI.L  #$40, D4    ;Compare ASCII Code to 40. If greater than 40, it's a letter
000010A8  6C00 0018                 77          BGE     ConvertAlpha
000010AC                            78  
000010AC  0C84 00000030             79          CMPI.L  #$30, D4    ;Check one more time to check if it is a digit between 0-9
000010B2  6D00 0090                 80          BLT     Restart     ;Characters less than 0 is invalid. Restart
000010B6  0484 00000030             81          SUB.L   #$30, D4    ;Convert this ASCII to Hex
000010BC  D994                      82          ADD.L   D4, (A4)
000010BE  6000 0014                 83          BRA     AfterConvert
000010C2                            84  
000010C2                            85  ConvertAlpha
000010C2  0C84 00000046             86          CMPI.L  #$46, D4    ;Still make sure it is a letter and if it is less than F
000010C8  6E00 007A                 87          BGT     Restart     ;Greater than 46, means greater than F. Invalid
000010CC  0484 00000037             88          SUB.L   #$37, D4    
000010D2  D994                      89          ADD.L   D4, (A4)
000010D4                            90  
000010D4                            91  AfterConvert
000010D4  5385                      92          SUB.L   #1, D5
000010D6  0C85 00000000             93          CMPI.L  #0, D5
000010DC  66BC                      94          BNE     Convert
000010DE  4E75                      95          RTS
000010E0                            96  
000010E0                            97  NextPrompt
000010E0  43F9 00003260             98          LEA     NextPage, A1    ;Prompt User to press Enter if they want to continue
000010E6  11FC 000E 0000            99          MOVE.B  #14, 0
000010EC  4E4F                     100          TRAP    #15 
000010EE                           101  
000010EE  103C 0005                102          MOVE.B  #5, D0
000010F2  4E4F                     103          TRAP    #15
000010F4                           104  
000010F4  B23C 000D                105          CMP.B   #$D, D1     ;This is if they press the Enter key to keep going
000010F8  6700 000C                106          BEQ     GoNextPage  ;Go to the next page
000010FC                           107          
000010FC  B23C 001B                108          CMP.B   #$1B, D1    ;If the Escape Key is hit then Stop
00001100  6700 0062                109          BEQ     ExitPro
00001104                           110          
00001104  66DA                     111          BNE     NextPrompt  ;If the user doesn't press any of the keys, ask again
00001106                           112  
00001106                           113  GoNextPage
00001106  4285                     114          CLR.L   D5          ;Clear the counter
00001108  6000 0002                115          BRA     ProcessInstructions    
0000110C                           116  
0000110C                           117  *-----------Process----------------
0000110C                           118  * Start readding both the addresses 
0000110C                           119  
0000110C                           120  ProcessInstructions
0000110C  4E71                     121          NOP            
0000110E                           122          
0000110E                           123  *-----------Ending Prompt--------------
0000110E                           124  End
0000110E  4280                     125          CLR.L   D0
00001110  43F9 00003217            126          LEA     Finish, A1  ;Finished Diassembling, ask to restart or stop
00001116  103C 000E                127          MOVE.B  #14, D0     ;Displays the Message
0000111A  4E4F                     128          TRAP    #15
0000111C                           129          
0000111C  103C 0005                130          MOVE.B  #5, D0      ;Read in the character that the user will put in.
00001120  4E4F                     131          TRAP    #15         
00001122                           132          
00001122  0C01 0052                133          CMPI.B  #$52, D1    ;Check if the ASCII string is 'R'
00001126  6700 001C                134          BEQ     Restart
0000112A                           135  
0000112A  0C01 0072                136          CMPI.B  #$72, D1    ;Check if the ASCII string is 'r'
0000112E  6700 0014                137          BEQ     Restart
00001132                           138          
00001132  0C01 0053                139          CMPI.B  #$53, D1    ;Check if the ASCII string is 'S'
00001136  6700 002C                140          BEQ     ExitPro
0000113A                           141          
0000113A  0C01 0053                142          CMPI.B  #$53, D1    ;Check if the ASCII string is 's'
0000113E  6700 0024                143          BEQ     ExitPro
00001142                           144  
00001142  60CA                     145          BRA     End         ;If there is an invalid input
00001144                           146          
00001144                           147  Restart:
00001144                           148          *LEA     Clear, A1   ;Load the newline to the address
00001144  4280                     149          CLR.L   D0          ;Clear all Data Registers to reset them
00001146  4281                     150          CLR.L   D1
00001148  4282                     151          CLR.L   D2
0000114A  4283                     152          CLR.L   D3
0000114C  4284                     153          CLR.L   D4
0000114E  4285                     154          CLR.L   D5
00001150  4286                     155          CLR.L   D6
00001152  4287                     156          CLR.L   D7
00001154                           157          
00001154  2240                     158          MOVE.L  D0, A1      ;Clear all Address Registers to reset them
00001156  2440                     159          MOVE.L  D0, A2
00001158  2640                     160          MOVE.L  D0, A3
0000115A  2840                     161          MOVE.L  D0, A4
0000115C  2A40                     162          MOVE.L  D0, A5
0000115E  2C40                     163          MOVE.L  D0, A6
00001160                           164          
00001160  4EF8 1000                165          JMP     START   
00001164                           166          
00001164                           167  ExitPro
00001164  FFFF FFFF                168      SIMHALT             ; halt simulator
00001168                           169      
00001168                           170  *-------------Variables--------------
00001168                           171  StartString DS.L    0       ;Initialize the start string
00001168                           172  EndString   DS.L    0       ;Initialize an end string
00001168                           173  StartAddr   DS.L    1000    ;Initialize and declare a starting address
00002108                           174  EndAddr     DS.L    1000    ;Initialize and declare an end address
000030A8                           175      
000030A8                           176  *------------Prompt------------------
000030A8= 57 65 6C 63 6F 6D ...    177  Prompt      DC.B    'Welcome to our Disassembler Program!', CR, LF
000030CE= 48 65 72 65 20 61 ...    178              DC.B    'Here are some rules for the program:', CR, LF
000030F4= 31 2E 20 41 64 64 ...    179              DC.B    '1. Addresses entered must be in Hexadecimal', CR, LF
00003121= 32 2E 20 53 74 61 ...    180              DC.B    '2. Starting address must be more tham $00001000', CR, LF
00003152= 33 2E 20 45 6E 64 ...    181              DC.B    '3. Ending address much be greater than starting address or less than $FFFFFFFF', CR, LF
000031A2                           182  
000031A2= 50 6C 65 61 73 65 ...    183  Address1    DC.B    'Please enter the starting address: ', 0            
000031C6= 50 6C 65 61 73 65 ...    184  Address2    DC.B    'Please enter the ending address: ', 0
000031E8= 54 6F 20 63 6F 6E ...    185  Contin      DC.B    'To continue to the next 20 lines, press ENTER', CR, LF
00003217= 57 65 20 68 61 76 ...    186  Finish      DC.B    'We have finished Disassembling! To restart, press R. To stop, press S:', CR, LF
0000325F= 00                       187  Clear       DC.B    '', 0
00003260= 54 6F 20 43 6F 6E ...    188  NextPage    DC.B    'To Continue, Press ENTER. To Stop, Press ESC', CR, LF
0000328E                           189  
0000328E                           190      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESS1            31A2
ADDRESS2            31C6
AFTERCONVERT        10D4
CLEAR               325F
CONTIN              31E8
CONVERT             109A
CONVERTALPHA        10C2
CR                  D
END                 110E
ENDADDR             2108
ENDSTRING           1168
EXITPRO             1164
FINISH              3217
GONEXTPAGE          1106
INITIAL             1000
LF                  A
NEXTPAGE            3260
NEXTPROMPT          10E0
PROCESSINSTRUCTIONS  110C
PROMPT              30A8
RESTART             1144
STACK               A000
START               1000
STARTADDR           1168
STARTSTRING         1168
USERINPUT           100C
